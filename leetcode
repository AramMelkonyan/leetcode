print("N189")
class Solution:
  def rotate(self, nums, k):
    s = nums[-k:]
    s.reverse()
    del nums[-k:]
    nums = s+nums 
    return nums


nums = [-1,-100,3,99]
k = 2
print(Solution().rotate(nums,k))

print("——————————————————————")
print("N215")
class Solution:
  def findKthLargest(self, nums, k):

    for _ in range(k): 
        m = nums[0]
        for i in range(1,len(nums)):
            if nums[i] > m:
                m = nums[i]
        nums.remove(m)
    return m


nums = [3,2,1,5,6,4]
k = 4
print(Solution().findKthLargest(nums,k))

print("——————————————————————")
print("N316")
class Solution:
    def removeDuplicateLetters(self, s):
        return "".join(set(list(s)))

s = "bcabc"
print(Solution().removeDuplicateLetters(s))

print("——————————————————————")
print("N442")
class Solution:
    def findDuplicates(self, nums):
        new = [] 
        for i in set(nums):
        	if nums.count(i) > 1:
        		if new.count(i) == 0: 
        			new.append(i)
        return new


nums = [4,3,2,7,8,2,3,1]

print(Solution().findDuplicates(nums))   

print("——————————————————————")
print("N500")
class Solution:
    def findWords(self, words):
        s = "asdfghjkl"
        new = []
        for word in words:
            lenght = 0
            for i in word.lower():
                if i in s or i == 'b':
                    lenght += 1
                else:
                    break
            if lenght == len(word):
                new.append(word)
        return new

words = words = ["Hello","Alaska","Dad","Peace"]

print(Solution().findWords(words))

print("——————————————————————")
print("N540")
class Solution:
    def singleNonDuplicate(self, nums):
        for i in set(nums):
            if nums.count(i) == 1:
                return i


nums = [1,1,2,3,3,4,4,8,8]

print(Solution().singleNonDuplicate(nums))  

print("——————————————————————")
print("N448")
class Solution:
    def findDisappearedNumbers(self, nums):
        new = []
        for i in range(1,len(nums)+1):
            if i not in set(nums):
                new.append(i)
        return new

nums = [1,1]
print(Solution().findDisappearedNumbers(nums)) 

print("——————————————————————")
print("N467")
class Solution:
    def findSubstringInWraproundString(self, s):
        k = "abcdefghijklmnopqrstuvwxyz" 
        m = {}
        for i in s:
            if i not in m:
                m[i] = 1
            else:
                m[i] +=1

        tox = "".join(m.keys())
        count = 0
        for i in range(1,(len(tox)+1)):
            for j in range(i):
                if tox[j:i] in k*2:
                    count += 1
        return count

s = "zab"
print(Solution().findSubstringInWraproundString(s)) 

print("——————————————————————")
print("N592")
import re
import math
class Solution:
    def fractionAddition(self, expression):
        tver = list(map(int, re.findall('[+-]?[0-9]+', expression)))
        A = 0
        B = 1
        for a, b in zip(tver[::2], tver[1::2]):
            A = A * b + a * B
            B *= b
            g = math.gcd(A, B)
            A //= g
            B //= g
        return str(A) + '/' + str(B)


expression = "-1/2+1/2+1/3"
print(Solution().fractionAddition(expression)) 
 
